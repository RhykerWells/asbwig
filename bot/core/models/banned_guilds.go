// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// BannedGuild is an object representing the database table.
type BannedGuild struct {
	GuildID string `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`

	R *bannedGuildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bannedGuildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BannedGuildColumns = struct {
	GuildID string
}{
	GuildID: "guild_id",
}

var BannedGuildTableColumns = struct {
	GuildID string
}{
	GuildID: "banned_guilds.guild_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BannedGuildWhere = struct {
	GuildID whereHelperstring
}{
	GuildID: whereHelperstring{field: "\"banned_guilds\".\"guild_id\""},
}

// BannedGuildRels is where relationship names are stored.
var BannedGuildRels = struct {
}{}

// bannedGuildR is where relationships are stored.
type bannedGuildR struct {
}

// NewStruct creates a new relationship struct
func (*bannedGuildR) NewStruct() *bannedGuildR {
	return &bannedGuildR{}
}

// bannedGuildL is where Load methods for each relationship are stored.
type bannedGuildL struct{}

var (
	bannedGuildAllColumns            = []string{"guild_id"}
	bannedGuildColumnsWithoutDefault = []string{"guild_id"}
	bannedGuildColumnsWithDefault    = []string{}
	bannedGuildPrimaryKeyColumns     = []string{"guild_id"}
	bannedGuildGeneratedColumns      = []string{}
)

type (
	// BannedGuildSlice is an alias for a slice of pointers to BannedGuild.
	// This should almost always be used instead of []BannedGuild.
	BannedGuildSlice []*BannedGuild

	bannedGuildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bannedGuildType                 = reflect.TypeOf(&BannedGuild{})
	bannedGuildMapping              = queries.MakeStructMapping(bannedGuildType)
	bannedGuildPrimaryKeyMapping, _ = queries.BindMapping(bannedGuildType, bannedGuildMapping, bannedGuildPrimaryKeyColumns)
	bannedGuildInsertCacheMut       sync.RWMutex
	bannedGuildInsertCache          = make(map[string]insertCache)
	bannedGuildUpdateCacheMut       sync.RWMutex
	bannedGuildUpdateCache          = make(map[string]updateCache)
	bannedGuildUpsertCacheMut       sync.RWMutex
	bannedGuildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single bannedGuild record from the query using the global executor.
func (q bannedGuildQuery) OneG(ctx context.Context) (*BannedGuild, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single bannedGuild record from the query.
func (q bannedGuildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BannedGuild, error) {
	o := &BannedGuild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for banned_guilds")
	}

	return o, nil
}

// AllG returns all BannedGuild records from the query using the global executor.
func (q bannedGuildQuery) AllG(ctx context.Context) (BannedGuildSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all BannedGuild records from the query.
func (q bannedGuildQuery) All(ctx context.Context, exec boil.ContextExecutor) (BannedGuildSlice, error) {
	var o []*BannedGuild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BannedGuild slice")
	}

	return o, nil
}

// CountG returns the count of all BannedGuild records in the query using the global executor
func (q bannedGuildQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all BannedGuild records in the query.
func (q bannedGuildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count banned_guilds rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q bannedGuildQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q bannedGuildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if banned_guilds exists")
	}

	return count > 0, nil
}

// BannedGuilds retrieves all the records using an executor.
func BannedGuilds(mods ...qm.QueryMod) bannedGuildQuery {
	mods = append(mods, qm.From("\"banned_guilds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"banned_guilds\".*"})
	}

	return bannedGuildQuery{q}
}

// FindBannedGuildG retrieves a single record by ID.
func FindBannedGuildG(ctx context.Context, guildID string, selectCols ...string) (*BannedGuild, error) {
	return FindBannedGuild(ctx, boil.GetContextDB(), guildID, selectCols...)
}

// FindBannedGuild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBannedGuild(ctx context.Context, exec boil.ContextExecutor, guildID string, selectCols ...string) (*BannedGuild, error) {
	bannedGuildObj := &BannedGuild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"banned_guilds\" where \"guild_id\"=$1", sel,
	)

	q := queries.Raw(query, guildID)

	err := q.Bind(ctx, exec, bannedGuildObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from banned_guilds")
	}

	return bannedGuildObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *BannedGuild) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BannedGuild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no banned_guilds provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(bannedGuildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bannedGuildInsertCacheMut.RLock()
	cache, cached := bannedGuildInsertCache[key]
	bannedGuildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bannedGuildAllColumns,
			bannedGuildColumnsWithDefault,
			bannedGuildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bannedGuildType, bannedGuildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bannedGuildType, bannedGuildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"banned_guilds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"banned_guilds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into banned_guilds")
	}

	if !cached {
		bannedGuildInsertCacheMut.Lock()
		bannedGuildInsertCache[key] = cache
		bannedGuildInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single BannedGuild record using the global executor.
// See Update for more documentation.
func (o *BannedGuild) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the BannedGuild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BannedGuild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	bannedGuildUpdateCacheMut.RLock()
	cache, cached := bannedGuildUpdateCache[key]
	bannedGuildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bannedGuildAllColumns,
			bannedGuildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update banned_guilds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"banned_guilds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bannedGuildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bannedGuildType, bannedGuildMapping, append(wl, bannedGuildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update banned_guilds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for banned_guilds")
	}

	if !cached {
		bannedGuildUpdateCacheMut.Lock()
		bannedGuildUpdateCache[key] = cache
		bannedGuildUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q bannedGuildQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q bannedGuildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for banned_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for banned_guilds")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o BannedGuildSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BannedGuildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bannedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"banned_guilds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bannedGuildPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bannedGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bannedGuild")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *BannedGuild) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BannedGuild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no banned_guilds provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(bannedGuildColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bannedGuildUpsertCacheMut.RLock()
	cache, cached := bannedGuildUpsertCache[key]
	bannedGuildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bannedGuildAllColumns,
			bannedGuildColumnsWithDefault,
			bannedGuildColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bannedGuildAllColumns,
			bannedGuildPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert banned_guilds, could not build update column list")
		}

		ret := strmangle.SetComplement(bannedGuildAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bannedGuildPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert banned_guilds, could not build conflict column list")
			}

			conflict = make([]string, len(bannedGuildPrimaryKeyColumns))
			copy(conflict, bannedGuildPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"banned_guilds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bannedGuildType, bannedGuildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bannedGuildType, bannedGuildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert banned_guilds")
	}

	if !cached {
		bannedGuildUpsertCacheMut.Lock()
		bannedGuildUpsertCache[key] = cache
		bannedGuildUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single BannedGuild record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *BannedGuild) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single BannedGuild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BannedGuild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BannedGuild provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bannedGuildPrimaryKeyMapping)
	sql := "DELETE FROM \"banned_guilds\" WHERE \"guild_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from banned_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for banned_guilds")
	}

	return rowsAff, nil
}

func (q bannedGuildQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q bannedGuildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bannedGuildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from banned_guilds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for banned_guilds")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o BannedGuildSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BannedGuildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bannedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"banned_guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bannedGuildPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bannedGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for banned_guilds")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *BannedGuild) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no BannedGuild provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BannedGuild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBannedGuild(ctx, exec, o.GuildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BannedGuildSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty BannedGuildSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BannedGuildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BannedGuildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bannedGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"banned_guilds\".* FROM \"banned_guilds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bannedGuildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BannedGuildSlice")
	}

	*o = slice

	return nil
}

// BannedGuildExistsG checks if the BannedGuild row exists.
func BannedGuildExistsG(ctx context.Context, guildID string) (bool, error) {
	return BannedGuildExists(ctx, boil.GetContextDB(), guildID)
}

// BannedGuildExists checks if the BannedGuild row exists.
func BannedGuildExists(ctx context.Context, exec boil.ContextExecutor, guildID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"banned_guilds\" where \"guild_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if banned_guilds exists")
	}

	return exists, nil
}

// Exists checks if the BannedGuild row exists.
func (o *BannedGuild) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BannedGuildExists(ctx, exec, o.GuildID)
}
