// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// EconomyUser is an object representing the database table.
type EconomyUser struct {
	GuildID     string `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	UserID      string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Cash        int64  `boil:"cash" json:"cash" toml:"cash" yaml:"cash"`
	Bank        int64  `boil:"bank" json:"bank" toml:"bank" yaml:"bank"`
	Cfwinchance int64  `boil:"cfwinchance" json:"cfwinchance" toml:"cfwinchance" yaml:"cfwinchance"`

	R *economyUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L economyUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EconomyUserColumns = struct {
	GuildID     string
	UserID      string
	Cash        string
	Bank        string
	Cfwinchance string
}{
	GuildID:     "guild_id",
	UserID:      "user_id",
	Cash:        "cash",
	Bank:        "bank",
	Cfwinchance: "cfwinchance",
}

var EconomyUserTableColumns = struct {
	GuildID     string
	UserID      string
	Cash        string
	Bank        string
	Cfwinchance string
}{
	GuildID:     "economy_users.guild_id",
	UserID:      "economy_users.user_id",
	Cash:        "economy_users.cash",
	Bank:        "economy_users.bank",
	Cfwinchance: "economy_users.cfwinchance",
}

// Generated where

var EconomyUserWhere = struct {
	GuildID     whereHelperstring
	UserID      whereHelperstring
	Cash        whereHelperint64
	Bank        whereHelperint64
	Cfwinchance whereHelperint64
}{
	GuildID:     whereHelperstring{field: "\"economy_users\".\"guild_id\""},
	UserID:      whereHelperstring{field: "\"economy_users\".\"user_id\""},
	Cash:        whereHelperint64{field: "\"economy_users\".\"cash\""},
	Bank:        whereHelperint64{field: "\"economy_users\".\"bank\""},
	Cfwinchance: whereHelperint64{field: "\"economy_users\".\"cfwinchance\""},
}

// EconomyUserRels is where relationship names are stored.
var EconomyUserRels = struct {
	Guild string
}{
	Guild: "Guild",
}

// economyUserR is where relationships are stored.
type economyUserR struct {
	Guild *EconomyConfig `boil:"Guild" json:"Guild" toml:"Guild" yaml:"Guild"`
}

// NewStruct creates a new relationship struct
func (*economyUserR) NewStruct() *economyUserR {
	return &economyUserR{}
}

func (o *EconomyUser) GetGuild() *EconomyConfig {
	if o == nil {
		return nil
	}

	return o.R.GetGuild()
}

func (r *economyUserR) GetGuild() *EconomyConfig {
	if r == nil {
		return nil
	}

	return r.Guild
}

// economyUserL is where Load methods for each relationship are stored.
type economyUserL struct{}

var (
	economyUserAllColumns            = []string{"guild_id", "user_id", "cash", "bank", "cfwinchance"}
	economyUserColumnsWithoutDefault = []string{"guild_id", "user_id", "cash", "bank"}
	economyUserColumnsWithDefault    = []string{"cfwinchance"}
	economyUserPrimaryKeyColumns     = []string{"guild_id", "user_id"}
	economyUserGeneratedColumns      = []string{}
)

type (
	// EconomyUserSlice is an alias for a slice of pointers to EconomyUser.
	// This should almost always be used instead of []EconomyUser.
	EconomyUserSlice []*EconomyUser

	economyUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	economyUserType                 = reflect.TypeOf(&EconomyUser{})
	economyUserMapping              = queries.MakeStructMapping(economyUserType)
	economyUserPrimaryKeyMapping, _ = queries.BindMapping(economyUserType, economyUserMapping, economyUserPrimaryKeyColumns)
	economyUserInsertCacheMut       sync.RWMutex
	economyUserInsertCache          = make(map[string]insertCache)
	economyUserUpdateCacheMut       sync.RWMutex
	economyUserUpdateCache          = make(map[string]updateCache)
	economyUserUpsertCacheMut       sync.RWMutex
	economyUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single economyUser record from the query using the global executor.
func (q economyUserQuery) OneG(ctx context.Context) (*EconomyUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single economyUser record from the query.
func (q economyUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EconomyUser, error) {
	o := &EconomyUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for economy_users")
	}

	return o, nil
}

// AllG returns all EconomyUser records from the query using the global executor.
func (q economyUserQuery) AllG(ctx context.Context) (EconomyUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EconomyUser records from the query.
func (q economyUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (EconomyUserSlice, error) {
	var o []*EconomyUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EconomyUser slice")
	}

	return o, nil
}

// CountG returns the count of all EconomyUser records in the query using the global executor
func (q economyUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EconomyUser records in the query.
func (q economyUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count economy_users rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q economyUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q economyUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if economy_users exists")
	}

	return count > 0, nil
}

// Guild pointed to by the foreign key.
func (o *EconomyUser) Guild(mods ...qm.QueryMod) economyConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guild_id\" = ?", o.GuildID),
	}

	queryMods = append(queryMods, mods...)

	return EconomyConfigs(queryMods...)
}

// LoadGuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (economyUserL) LoadGuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEconomyUser interface{}, mods queries.Applicator) error {
	var slice []*EconomyUser
	var object *EconomyUser

	if singular {
		var ok bool
		object, ok = maybeEconomyUser.(*EconomyUser)
		if !ok {
			object = new(EconomyUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEconomyUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEconomyUser))
			}
		}
	} else {
		s, ok := maybeEconomyUser.(*[]*EconomyUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEconomyUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEconomyUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &economyUserR{}
		}
		args[object.GuildID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &economyUserR{}
			}

			args[obj.GuildID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`economy_config`),
		qm.WhereIn(`economy_config.guild_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EconomyConfig")
	}

	var resultSlice []*EconomyConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EconomyConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for economy_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for economy_config")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guild = foreign
		if foreign.R == nil {
			foreign.R = &economyConfigR{}
		}
		foreign.R.GuildEconomyUsers = append(foreign.R.GuildEconomyUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuildID == foreign.GuildID {
				local.R.Guild = foreign
				if foreign.R == nil {
					foreign.R = &economyConfigR{}
				}
				foreign.R.GuildEconomyUsers = append(foreign.R.GuildEconomyUsers, local)
				break
			}
		}
	}

	return nil
}

// SetGuildG of the economyUser to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildEconomyUsers.
// Uses the global database handle.
func (o *EconomyUser) SetGuildG(ctx context.Context, insert bool, related *EconomyConfig) error {
	return o.SetGuild(ctx, boil.GetContextDB(), insert, related)
}

// SetGuild of the economyUser to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildEconomyUsers.
func (o *EconomyUser) SetGuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *EconomyConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"economy_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
		strmangle.WhereClause("\"", "\"", 2, economyUserPrimaryKeyColumns),
	)
	values := []interface{}{related.GuildID, o.GuildID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuildID = related.GuildID
	if o.R == nil {
		o.R = &economyUserR{
			Guild: related,
		}
	} else {
		o.R.Guild = related
	}

	if related.R == nil {
		related.R = &economyConfigR{
			GuildEconomyUsers: EconomyUserSlice{o},
		}
	} else {
		related.R.GuildEconomyUsers = append(related.R.GuildEconomyUsers, o)
	}

	return nil
}

// EconomyUsers retrieves all the records using an executor.
func EconomyUsers(mods ...qm.QueryMod) economyUserQuery {
	mods = append(mods, qm.From("\"economy_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"economy_users\".*"})
	}

	return economyUserQuery{q}
}

// FindEconomyUserG retrieves a single record by ID.
func FindEconomyUserG(ctx context.Context, guildID string, userID string, selectCols ...string) (*EconomyUser, error) {
	return FindEconomyUser(ctx, boil.GetContextDB(), guildID, userID, selectCols...)
}

// FindEconomyUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEconomyUser(ctx context.Context, exec boil.ContextExecutor, guildID string, userID string, selectCols ...string) (*EconomyUser, error) {
	economyUserObj := &EconomyUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"economy_users\" where \"guild_id\"=$1 AND \"user_id\"=$2", sel,
	)

	q := queries.Raw(query, guildID, userID)

	err := q.Bind(ctx, exec, economyUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from economy_users")
	}

	return economyUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EconomyUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EconomyUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no economy_users provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(economyUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	economyUserInsertCacheMut.RLock()
	cache, cached := economyUserInsertCache[key]
	economyUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			economyUserAllColumns,
			economyUserColumnsWithDefault,
			economyUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(economyUserType, economyUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(economyUserType, economyUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"economy_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"economy_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into economy_users")
	}

	if !cached {
		economyUserInsertCacheMut.Lock()
		economyUserInsertCache[key] = cache
		economyUserInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single EconomyUser record using the global executor.
// See Update for more documentation.
func (o *EconomyUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EconomyUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EconomyUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	economyUserUpdateCacheMut.RLock()
	cache, cached := economyUserUpdateCache[key]
	economyUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			economyUserAllColumns,
			economyUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update economy_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"economy_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, economyUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(economyUserType, economyUserMapping, append(wl, economyUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update economy_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for economy_users")
	}

	if !cached {
		economyUserUpdateCacheMut.Lock()
		economyUserUpdateCache[key] = cache
		economyUserUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q economyUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q economyUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for economy_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for economy_users")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EconomyUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EconomyUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), economyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"economy_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, economyUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in economyUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all economyUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EconomyUser) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EconomyUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no economy_users provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(economyUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	economyUserUpsertCacheMut.RLock()
	cache, cached := economyUserUpsertCache[key]
	economyUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			economyUserAllColumns,
			economyUserColumnsWithDefault,
			economyUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			economyUserAllColumns,
			economyUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert economy_users, could not build update column list")
		}

		ret := strmangle.SetComplement(economyUserAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(economyUserPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert economy_users, could not build conflict column list")
			}

			conflict = make([]string, len(economyUserPrimaryKeyColumns))
			copy(conflict, economyUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"economy_users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(economyUserType, economyUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(economyUserType, economyUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert economy_users")
	}

	if !cached {
		economyUserUpsertCacheMut.Lock()
		economyUserUpsertCache[key] = cache
		economyUserUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single EconomyUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EconomyUser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EconomyUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EconomyUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EconomyUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), economyUserPrimaryKeyMapping)
	sql := "DELETE FROM \"economy_users\" WHERE \"guild_id\"=$1 AND \"user_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from economy_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for economy_users")
	}

	return rowsAff, nil
}

func (q economyUserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q economyUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no economyUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from economy_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for economy_users")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EconomyUserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EconomyUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), economyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"economy_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, economyUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from economyUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for economy_users")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EconomyUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no EconomyUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EconomyUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEconomyUser(ctx, exec, o.GuildID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EconomyUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty EconomyUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EconomyUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EconomyUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), economyUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"economy_users\".* FROM \"economy_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, economyUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EconomyUserSlice")
	}

	*o = slice

	return nil
}

// EconomyUserExistsG checks if the EconomyUser row exists.
func EconomyUserExistsG(ctx context.Context, guildID string, userID string) (bool, error) {
	return EconomyUserExists(ctx, boil.GetContextDB(), guildID, userID)
}

// EconomyUserExists checks if the EconomyUser row exists.
func EconomyUserExists(ctx context.Context, exec boil.ContextExecutor, guildID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"economy_users\" where \"guild_id\"=$1 AND \"user_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if economy_users exists")
	}

	return exists, nil
}

// Exists checks if the EconomyUser row exists.
func (o *EconomyUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EconomyUserExists(ctx, exec, o.GuildID, o.UserID)
}
