// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ModerationCase is an object representing the database table.
type ModerationCase struct {
	CaseID     int64       `boil:"case_id" json:"case_id" toml:"case_id" yaml:"case_id"`
	GuildID    string      `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`
	StaffID    string      `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	OffenderID string      `boil:"offender_id" json:"offender_id" toml:"offender_id" yaml:"offender_id"`
	Reason     null.String `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	Action     string      `boil:"action" json:"action" toml:"action" yaml:"action"`
	Loglink    string      `boil:"loglink" json:"loglink" toml:"loglink" yaml:"loglink"`

	R *moderationCaseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moderationCaseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModerationCaseColumns = struct {
	CaseID     string
	GuildID    string
	StaffID    string
	OffenderID string
	Reason     string
	Action     string
	Loglink    string
}{
	CaseID:     "case_id",
	GuildID:    "guild_id",
	StaffID:    "staff_id",
	OffenderID: "offender_id",
	Reason:     "reason",
	Action:     "action",
	Loglink:    "loglink",
}

var ModerationCaseTableColumns = struct {
	CaseID     string
	GuildID    string
	StaffID    string
	OffenderID string
	Reason     string
	Action     string
	Loglink    string
}{
	CaseID:     "moderation_cases.case_id",
	GuildID:    "moderation_cases.guild_id",
	StaffID:    "moderation_cases.staff_id",
	OffenderID: "moderation_cases.offender_id",
	Reason:     "moderation_cases.reason",
	Action:     "moderation_cases.action",
	Loglink:    "moderation_cases.loglink",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ModerationCaseWhere = struct {
	CaseID     whereHelperint64
	GuildID    whereHelperstring
	StaffID    whereHelperstring
	OffenderID whereHelperstring
	Reason     whereHelpernull_String
	Action     whereHelperstring
	Loglink    whereHelperstring
}{
	CaseID:     whereHelperint64{field: "\"moderation_cases\".\"case_id\""},
	GuildID:    whereHelperstring{field: "\"moderation_cases\".\"guild_id\""},
	StaffID:    whereHelperstring{field: "\"moderation_cases\".\"staff_id\""},
	OffenderID: whereHelperstring{field: "\"moderation_cases\".\"offender_id\""},
	Reason:     whereHelpernull_String{field: "\"moderation_cases\".\"reason\""},
	Action:     whereHelperstring{field: "\"moderation_cases\".\"action\""},
	Loglink:    whereHelperstring{field: "\"moderation_cases\".\"loglink\""},
}

// ModerationCaseRels is where relationship names are stored.
var ModerationCaseRels = struct {
	Guild string
}{
	Guild: "Guild",
}

// moderationCaseR is where relationships are stored.
type moderationCaseR struct {
	Guild *ModerationConfig `boil:"Guild" json:"Guild" toml:"Guild" yaml:"Guild"`
}

// NewStruct creates a new relationship struct
func (*moderationCaseR) NewStruct() *moderationCaseR {
	return &moderationCaseR{}
}

func (o *ModerationCase) GetGuild() *ModerationConfig {
	if o == nil {
		return nil
	}

	return o.R.GetGuild()
}

func (r *moderationCaseR) GetGuild() *ModerationConfig {
	if r == nil {
		return nil
	}

	return r.Guild
}

// moderationCaseL is where Load methods for each relationship are stored.
type moderationCaseL struct{}

var (
	moderationCaseAllColumns            = []string{"case_id", "guild_id", "staff_id", "offender_id", "reason", "action", "loglink"}
	moderationCaseColumnsWithoutDefault = []string{"case_id", "guild_id", "staff_id", "offender_id", "action", "loglink"}
	moderationCaseColumnsWithDefault    = []string{"reason"}
	moderationCasePrimaryKeyColumns     = []string{"guild_id", "case_id"}
	moderationCaseGeneratedColumns      = []string{}
)

type (
	// ModerationCaseSlice is an alias for a slice of pointers to ModerationCase.
	// This should almost always be used instead of []ModerationCase.
	ModerationCaseSlice []*ModerationCase

	moderationCaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moderationCaseType                 = reflect.TypeOf(&ModerationCase{})
	moderationCaseMapping              = queries.MakeStructMapping(moderationCaseType)
	moderationCasePrimaryKeyMapping, _ = queries.BindMapping(moderationCaseType, moderationCaseMapping, moderationCasePrimaryKeyColumns)
	moderationCaseInsertCacheMut       sync.RWMutex
	moderationCaseInsertCache          = make(map[string]insertCache)
	moderationCaseUpdateCacheMut       sync.RWMutex
	moderationCaseUpdateCache          = make(map[string]updateCache)
	moderationCaseUpsertCacheMut       sync.RWMutex
	moderationCaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single moderationCase record from the query using the global executor.
func (q moderationCaseQuery) OneG(ctx context.Context) (*ModerationCase, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single moderationCase record from the query.
func (q moderationCaseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ModerationCase, error) {
	o := &ModerationCase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for moderation_cases")
	}

	return o, nil
}

// AllG returns all ModerationCase records from the query using the global executor.
func (q moderationCaseQuery) AllG(ctx context.Context) (ModerationCaseSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ModerationCase records from the query.
func (q moderationCaseQuery) All(ctx context.Context, exec boil.ContextExecutor) (ModerationCaseSlice, error) {
	var o []*ModerationCase

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ModerationCase slice")
	}

	return o, nil
}

// CountG returns the count of all ModerationCase records in the query using the global executor
func (q moderationCaseQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ModerationCase records in the query.
func (q moderationCaseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count moderation_cases rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q moderationCaseQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q moderationCaseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if moderation_cases exists")
	}

	return count > 0, nil
}

// Guild pointed to by the foreign key.
func (o *ModerationCase) Guild(mods ...qm.QueryMod) moderationConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"guild_id\" = ?", o.GuildID),
	}

	queryMods = append(queryMods, mods...)

	return ModerationConfigs(queryMods...)
}

// LoadGuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moderationCaseL) LoadGuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeModerationCase interface{}, mods queries.Applicator) error {
	var slice []*ModerationCase
	var object *ModerationCase

	if singular {
		var ok bool
		object, ok = maybeModerationCase.(*ModerationCase)
		if !ok {
			object = new(ModerationCase)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeModerationCase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeModerationCase))
			}
		}
	} else {
		s, ok := maybeModerationCase.(*[]*ModerationCase)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeModerationCase)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeModerationCase))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &moderationCaseR{}
		}
		args[object.GuildID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moderationCaseR{}
			}

			args[obj.GuildID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`moderation_config`),
		qm.WhereIn(`moderation_config.guild_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ModerationConfig")
	}

	var resultSlice []*ModerationConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ModerationConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for moderation_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moderation_config")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guild = foreign
		if foreign.R == nil {
			foreign.R = &moderationConfigR{}
		}
		foreign.R.GuildModerationCases = append(foreign.R.GuildModerationCases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuildID == foreign.GuildID {
				local.R.Guild = foreign
				if foreign.R == nil {
					foreign.R = &moderationConfigR{}
				}
				foreign.R.GuildModerationCases = append(foreign.R.GuildModerationCases, local)
				break
			}
		}
	}

	return nil
}

// SetGuildG of the moderationCase to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildModerationCases.
// Uses the global database handle.
func (o *ModerationCase) SetGuildG(ctx context.Context, insert bool, related *ModerationConfig) error {
	return o.SetGuild(ctx, boil.GetContextDB(), insert, related)
}

// SetGuild of the moderationCase to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildModerationCases.
func (o *ModerationCase) SetGuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ModerationConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"moderation_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
		strmangle.WhereClause("\"", "\"", 2, moderationCasePrimaryKeyColumns),
	)
	values := []interface{}{related.GuildID, o.GuildID, o.CaseID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuildID = related.GuildID
	if o.R == nil {
		o.R = &moderationCaseR{
			Guild: related,
		}
	} else {
		o.R.Guild = related
	}

	if related.R == nil {
		related.R = &moderationConfigR{
			GuildModerationCases: ModerationCaseSlice{o},
		}
	} else {
		related.R.GuildModerationCases = append(related.R.GuildModerationCases, o)
	}

	return nil
}

// ModerationCases retrieves all the records using an executor.
func ModerationCases(mods ...qm.QueryMod) moderationCaseQuery {
	mods = append(mods, qm.From("\"moderation_cases\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"moderation_cases\".*"})
	}

	return moderationCaseQuery{q}
}

// FindModerationCaseG retrieves a single record by ID.
func FindModerationCaseG(ctx context.Context, guildID string, caseID int64, selectCols ...string) (*ModerationCase, error) {
	return FindModerationCase(ctx, boil.GetContextDB(), guildID, caseID, selectCols...)
}

// FindModerationCase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModerationCase(ctx context.Context, exec boil.ContextExecutor, guildID string, caseID int64, selectCols ...string) (*ModerationCase, error) {
	moderationCaseObj := &ModerationCase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"moderation_cases\" where \"guild_id\"=$1 AND \"case_id\"=$2", sel,
	)

	q := queries.Raw(query, guildID, caseID)

	err := q.Bind(ctx, exec, moderationCaseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from moderation_cases")
	}

	return moderationCaseObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ModerationCase) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ModerationCase) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no moderation_cases provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(moderationCaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moderationCaseInsertCacheMut.RLock()
	cache, cached := moderationCaseInsertCache[key]
	moderationCaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moderationCaseAllColumns,
			moderationCaseColumnsWithDefault,
			moderationCaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(moderationCaseType, moderationCaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moderationCaseType, moderationCaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"moderation_cases\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"moderation_cases\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into moderation_cases")
	}

	if !cached {
		moderationCaseInsertCacheMut.Lock()
		moderationCaseInsertCache[key] = cache
		moderationCaseInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ModerationCase record using the global executor.
// See Update for more documentation.
func (o *ModerationCase) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ModerationCase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ModerationCase) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	moderationCaseUpdateCacheMut.RLock()
	cache, cached := moderationCaseUpdateCache[key]
	moderationCaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moderationCaseAllColumns,
			moderationCasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update moderation_cases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"moderation_cases\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, moderationCasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moderationCaseType, moderationCaseMapping, append(wl, moderationCasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update moderation_cases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for moderation_cases")
	}

	if !cached {
		moderationCaseUpdateCacheMut.Lock()
		moderationCaseUpdateCache[key] = cache
		moderationCaseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q moderationCaseQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q moderationCaseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for moderation_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for moderation_cases")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ModerationCaseSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModerationCaseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"moderation_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, moderationCasePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in moderationCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all moderationCase")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ModerationCase) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ModerationCase) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no moderation_cases provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(moderationCaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moderationCaseUpsertCacheMut.RLock()
	cache, cached := moderationCaseUpsertCache[key]
	moderationCaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			moderationCaseAllColumns,
			moderationCaseColumnsWithDefault,
			moderationCaseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			moderationCaseAllColumns,
			moderationCasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert moderation_cases, could not build update column list")
		}

		ret := strmangle.SetComplement(moderationCaseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(moderationCasePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert moderation_cases, could not build conflict column list")
			}

			conflict = make([]string, len(moderationCasePrimaryKeyColumns))
			copy(conflict, moderationCasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"moderation_cases\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(moderationCaseType, moderationCaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moderationCaseType, moderationCaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert moderation_cases")
	}

	if !cached {
		moderationCaseUpsertCacheMut.Lock()
		moderationCaseUpsertCache[key] = cache
		moderationCaseUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single ModerationCase record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ModerationCase) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ModerationCase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ModerationCase) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ModerationCase provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moderationCasePrimaryKeyMapping)
	sql := "DELETE FROM \"moderation_cases\" WHERE \"guild_id\"=$1 AND \"case_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from moderation_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for moderation_cases")
	}

	return rowsAff, nil
}

func (q moderationCaseQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q moderationCaseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no moderationCaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moderation_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for moderation_cases")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ModerationCaseSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModerationCaseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"moderation_cases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moderationCasePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from moderationCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for moderation_cases")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ModerationCase) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ModerationCase provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ModerationCase) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindModerationCase(ctx, exec, o.GuildID, o.CaseID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModerationCaseSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ModerationCaseSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModerationCaseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModerationCaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moderationCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"moderation_cases\".* FROM \"moderation_cases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moderationCasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ModerationCaseSlice")
	}

	*o = slice

	return nil
}

// ModerationCaseExistsG checks if the ModerationCase row exists.
func ModerationCaseExistsG(ctx context.Context, guildID string, caseID int64) (bool, error) {
	return ModerationCaseExists(ctx, boil.GetContextDB(), guildID, caseID)
}

// ModerationCaseExists checks if the ModerationCase row exists.
func ModerationCaseExists(ctx context.Context, exec boil.ContextExecutor, guildID string, caseID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"moderation_cases\" where \"guild_id\"=$1 AND \"case_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, guildID, caseID)
	}
	row := exec.QueryRowContext(ctx, sql, guildID, caseID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if moderation_cases exists")
	}

	return exists, nil
}

// Exists checks if the ModerationCase row exists.
func (o *ModerationCase) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ModerationCaseExists(ctx, exec, o.GuildID, o.CaseID)
}
